package chatroomClient;

import chatroom.User;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * @author Karol Zdebel
 * 
 * Class responsible for displaying what users are in the ChatRoom, 
 * giving the ability for users to start private chat sessions, and viewing
 * user profile details.
 */
final public class UserPanel extends javax.swing.JPanel {

    private final ChatRoomFrame myFrame;  //Frame associated with this UserPanel
    private final ArrayList<User> user;   //All users in chat
    private final DefaultListModel<String> userListModel; //List of Users in GUI component
    private final ArrayList<User> permissionList; // permissions to users in chat
    private static final long serialVersionUID = 5;

    
    /**
     * Creates new form UserPanel
     * @param myFrame Frame associated with this JPanel
     * @param users All the users present in the chat
     * @param permList
     */
    
    public UserPanel(ChatRoomFrame myFrame, ArrayList<User> users, ArrayList<User> permList) {
    
        //Initialize components created in design tab
        initComponents();
        
        this.user = users;
        this.myFrame = myFrame;
       
        this.permissionList = permList;
        
        //set list model
        this.userListModel = new DefaultListModel<>(); 
        this.userList.setModel(userListModel);
        
        //display all users current in the chatroom
        for (User u: users){
            showUser(u);
        }
        
    }
    
    public void addPermission(User u){
        permissionList.add(u);
    }
    
    //Display user in UserPanel
    public void showUser(User u){
        user.add(u);
        userListModel.addElement(u.getNickname());
    }
    
    //Hide the already showing user from UserPanel
    public void hideUser(User user){
        userListModel.removeElement(user.getNickname());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList<>();
        messageUserButton = new javax.swing.JButton();
        viewUserProfileButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        givePermissionButton = new javax.swing.JButton();

        jScrollPane1.setViewportView(userList);

        givePermissionButton.setText("Permit");
        givePermissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                givePermissionActionPerformed(evt);
            }
        });
        
        messageUserButton.setText("Message");
        messageUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageUserButtonActionPerformed(evt);
            }
        });

        viewUserProfileButton.setText("View Profile");
        viewUserProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewUserProfileButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Online Users");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(messageUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewUserProfileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(givePermissionButton,javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageUserButton)
                    .addComponent(viewUserProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(givePermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private User getSelectedUser(){
        
        for (User u: user){
            if (u.getNickname().equals(userList.getSelectedValue())){
                return u;
            }
        }
        
        return null;
    }
    
    public void givePermissionActionPerformed(java.awt.event.ActionEvent evt){
        //act
        User u = getSelectedUser();
        if (u == null){
            JOptionPane.showMessageDialog(this.myFrame,"Please select a user.");
        }
        else{
            this.myFrame.sendPermission(u);
            JOptionPane.showMessageDialog(this.myFrame,"You gave user "+u.getNickname()+" permission to view your profile!");
        }
    }
    
    //Show user profile details when view profile button pressed
    private void viewUserProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewUserProfileButtonActionPerformed
        // TODO add your handling code here:
        
        User u = getSelectedUser();
        
        //Check to make sure a user has been selected
        if (u == null){
            JOptionPane.showMessageDialog(this.myFrame,"Please select a user.");
        }
        else if (permissionList.contains(u)){
            JOptionPane.showMessageDialog(this.myFrame,"USER DETAILS \nNickname: "+u.getNickname()+"\nAge: "+u.getAge()+"\nGender: "+u.getStringGender());
        }
        else{
            JOptionPane.showMessageDialog(this.myFrame,"This user has not granted you permission to view his profile. Try private messaging him.");
        }
    }//GEN-LAST:event_viewUserProfileButtonActionPerformed

    //Begin private chat session with the highlighted user when message button pressed
    private void messageUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageUserButtonActionPerformed
        
        //Check to make sure user has been selected in list
        if (getSelectedUser() == null){
            JOptionPane.showMessageDialog(this.myFrame,"Please select a user.");
        }
        //Make sure user isn't messaging himself
        else if (getSelectedUser().getNickname().equals(myFrame.getUserSession().getUser().getNickname())){
            JOptionPane.showMessageDialog(this.myFrame,"You cannot private message yourself.");
        }
        else{
            PrivateChatFrame privateChat = new PrivateChatFrame(myFrame.getUserSession(),getSelectedUser());
            privateChat.setVisible(true);
        }
        
    }//GEN-LAST:event_messageUserButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton messageUserButton;
    private javax.swing.JList<String> userList;
    private javax.swing.JButton viewUserProfileButton;
    private javax.swing.JButton givePermissionButton;
    // End of variables declaration//GEN-END:variables
}
