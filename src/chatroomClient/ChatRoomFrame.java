package chatroomClient;

import chatroom.*;
import java.awt.ComponentOrientation;
import java.awt.FlowLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;

/**
 *Class responsible for storing both the Chat Room GUI and User Panel GUI
 * components, and responding to user actions by communicating with the
 * user session.
 * 
 * @author Karol Zdebel
 */
final public class ChatRoomFrame extends javax.swing.JFrame {

    private final UserSession userSession;  //User session associated with this chat frame
    private final ChatRoomPanel chatRoomPanel;  //Chat GUI Component
    private UserPanel userPanel;  //User Log GUI Component
    private static final long serialVersionUID = 3;

    
    public ChatRoomFrame(UserSession userSession, User user) {
        
        
        //Arrange elements from left to right
        FlowLayout flowLayout = new FlowLayout();
        this.setLayout(flowLayout);
        this.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
        
        //Initialize instance variables
        this.userSession = userSession;
        this.chatRoomPanel = new ChatRoomPanel(this);
        this.userPanel = new UserPanel(this,userSession.getAllChatUsers(),userSession.getPermissionList());
        
        //Add Panels to Frame
        this.add(chatRoomPanel);
        this.add(userPanel);
        this.pack();
        this.setResizable(false);
        
        //When window is closed, remove user from chat room
        this.addWindowListener(new WindowAdapter(){
            
            @Override
            public void windowClosing(WindowEvent e){
                
                //Remove user
                userSession.leave();
                userPanel.hideUser(user);
            }
            
        });
      
        //set the title to the users nickname
        this.setTitle(user.getNickname());
        
        //don't close app upon closure of this frame
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }

    //Display string notification to user
    public void showChatNotification(String notif){
        chatRoomPanel.showNotifcation(notif);
    }
    
    public void sendPermission(User u){
        userSession.givePermission(u);
    }
    
    //Get user session instance variable
    public UserSession getUserSession(){
        return this.userSession;
    }
   
    public void hideUser(User user){
        userPanel.hideUser(user);
    }
    
    //Display a particular user to the user log
    public void showUser(User user){
        userPanel.showUser(user);
    }
    
    //Give permission to user
    public void givePermission(User user){
        userPanel.addPermission(user);
    }
    
    //Return chat room panel instance variable
    public ChatRoomPanel getChatRoomPanel(){
        return chatRoomPanel;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(240, 240));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 242, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
